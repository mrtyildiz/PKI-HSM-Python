import datetime
import subprocess
from ftplib import FTP
import os
from .RabbitMQall import *
from .models import slotlist
from django.db import connection
from datetime import datetime
import psycopg2
from psycopg2 import sql
from datetime import timedelta
from django.utils import timezone
from .models import Logs, Logs_Bak

import csv
from django.conf import settings

Postgresql_DB = os.environ.get("Postgresql_DB")
Postgresql_User = os.environ.get("Postgresql_User")
Postgresql_IP = os.environ.get("Postgresql_IP")
Postgresql_Password = os.environ.get("Postgresql_Password")
table_name = "app_logs_bak"
# from datetime import datetime, timedelta
from app.models import Logs
def upload_file(ftp, local_path, remote_filename):
    with open(local_path, 'rb') as local_file:
        ftp.storbinary(f'STOR {remote_filename}', local_file)
def FileUpload(filename):
    ftp_host = os.environ.get("ftp_host")
    ftp_user = os.environ.get("ftp_user")
    ftp_password = os.environ.get("ftp_password")
    local_filename = f'/opt/BackupLog/{filename}'
    remote_filename = filename
    ftp = FTP(ftp_host)
    ftp.login(user=ftp_user, passwd=ftp_password)
    remote_directory = ""
    ftp.cwd(remote_directory)
    upload_file(ftp, local_filename, remote_filename)
    ftp.quit()

def BackupFull():
    TokenName = os.environ.get("TokenName")
    print(TokenName)
    KeyName = os.environ.get("KeyName")
    print(KeyName)
    
    try:

        filename = backup_specific_table_postgresql()
        if not filename:
            pass
        else:
            print(f'Filename = {filename}')
            Slot_Token = slotlist.objects.get(TokenName=TokenName)
            Action = "Decrypt"
            result = Slot_PIN_ENC_DEC(Action,Slot_Token.UserPIN)
            json_string = json.dumps(result)
            loaded_data = json.loads(json_string)
            Token_PIN = loaded_data['Message:']['Decrypt Data: ']
            Slot_Info = FindID(TokenName)
            Token_ID = Slot_Info['Message: ']['slot_id']
            result = FileEncrypt(Token_ID,Token_PIN,KeyName,filename)
            print(result['Message:'])
            #print(result)
            if result['Message:'] == 'İşlem Başarılı':
                Root_Log = "/opt/BackupLog/"+str(filename)
                print(Root_Log)
                # if os.path.exists(Root_Log):
                #     pass
                if os.path.exists(Root_Log):
                    os.remove(Root_Log)

                else:
                    pass
            File_Enc_Log = filename +".enc"
            FileUpload(File_Enc_Log)
    except:
        print("hata")

#### app_logs_bak içerisini doldur
# def Bak_up_to_table():
#     try:

#         # PostgreSQL veritabanına bağlanma
#         conn = psycopg2.connect(
#             dbname=Postgresql_DB,
#             user=Postgresql_User,
#             password=Postgresql_Password,
#             host=Postgresql_IP,
#             port=5432
#         )

#         # Veritabanı üzerinde bir imleç oluştur
#         cur = conn.cursor()

#         # Son bir saatlik veriyi ekleyen SQL sorgusu
#         append_last_hour_data_query = sql.SQL("""
#             INSERT INTO {} (id, "MultiTenantName", "Log_Sensitives", "Log_Process", created_at, "Description", created_by_id)
#             SELECT id, "MultiTenantName", "Log_Sensitives", "Log_Process", created_at, "Description", created_by_id
#             FROM app_logs
#             WHERE created_at > current_timestamp - interval '1 hour'
#         """).format(sql.Identifier(table_name))

#         cur.execute(append_last_hour_data_query)
#         conn.commit()

#         print("Son bir saatlik veri eklendi.")

#     except Exception as e:
#         print("Hata:", e)

#     finally:
#         # Bağlantıyı kapat
#         if cur:
#             cur.close()
#         if conn:
#             conn.close()

def Bak_up_to_table():
    try:
        # Şu anki zamandan bir saat öncesini hesapla
        one_hour_ago = timezone.now() - timedelta(hours=1)

        # Son bir saatte oluşturulan Logs kayıtlarını al
        recent_logs = Logs.objects.filter(created_at__gt=one_hour_ago)

        # Logs_Bak modeline yeni kayıtlar ekle
        for log in recent_logs:
            Logs_Bak.objects.create(
                MultiTenantName=log.MultiTenantName,
                Log_Sensitives=log.Log_Sensitives,
                created_by=log.created_by,
                Log_Process=log.Log_Process,
                created_at=log.created_at,
                Description=log.Description
            )

        print("Son bir saatlik veri Logs_Bak tablosuna eklendi.")

    except Exception as e:
        print(f"Hata: {e}")

    # Fonksiyonun bir şey döndürmesine gerek yok

#### app_logs_bak temizle
# def truncate_table():
#     try:

#         # PostgreSQL veritabanına bağlanma
#         conn = psycopg2.connect(
#             dbname=Postgresql_DB,
#             user=Postgresql_User,
#             password=Postgresql_Password,
#             host=Postgresql_IP,
#             port=5432
#         )
        
#         # Veritabanı üzerinde bir imleç oluştur
#         cur = conn.cursor()

#         # TRUNCATE komutu ile tabloyu tamamen temizle
#         truncate_table_query = sql.SQL("""
#             TRUNCATE TABLE {} RESTART IDENTITY;
#         """).format(sql.Identifier(table_name))

#         cur.execute(truncate_table_query)
#         conn.commit()

#         print(f"{table_name} tablosu tamamen temizlendi.")

#     except Exception as e:
#         print("Hata:", e)

#     finally:
#         # Bağlantıyı kapat
#         if cur:
#             cur.close()
#         if conn:
#             conn.close()
def truncate_table():
    try:
        # Logs_Bak modelinin tüm kayıtlarını sil
        Logs_Bak.objects.all().delete()

        print("Logs_Bak tablosu tamamen temizlendi.")

    except Exception as e:
        print(f"Hata: {e}")

# def export_table_to_csv():
#     backup_time = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
#     backup_file = f'/opt/BackupLog/logs_backup_{backup_time}.csv'
#     backup_file_name = f'logs_backup_{backup_time}.csv'

#     try:
#         # PostgreSQL veritabanına bağlanma
#         conn = psycopg2.connect(
#             dbname=Postgresql_DB,
#             user=Postgresql_User,
#             password=Postgresql_Password,
#             host=Postgresql_IP,
#             port=5432
#         )

#         # Veritabanı üzerinde bir imleç oluştur
#         cur = conn.cursor()

#         # Tabloyu CSV dosyasına dışa aktar
#         export_to_csv_query = f"COPY (SELECT * FROM {table_name}) TO STDOUT WITH CSV HEADER"
        
#         with open(backup_file, 'w', encoding='utf-8') as csv_file:
#             cur.copy_expert(sql=export_to_csv_query, file=csv_file)

#         print(f"{table_name} tablosu {backup_file} dosyasına başarıyla dışa aktarıldı.")

#     except Exception as e:
#         print("Hata:", e)

#     finally:
#         # Bağlantıyı kapat
#         if cur:
#             cur.close()
#         if conn:
#             conn.close()
#     return backup_file_name

def export_table_to_csv():
    backup_time = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    backup_file = f'/opt/BackupLog/logs_backup_{backup_time}.csv'
    backup_file_name = f'logs_backup_{backup_time}.csv'
    try:
        # Logs_Bak modelinden tüm verileri al
        logs_bak_records = Logs_Bak.objects.all().values()

        # CSV dosyasını oluştur ve verileri yaz
        with open(backup_file, 'w', newline='', encoding='utf-8') as csv_file:
            writer = csv.writer(csv_file)
            # Başlık satırlarını yaz
            writer.writerow([field for field in logs_bak_records[0]])
            # Her kaydı CSV dosyasına yaz
            for record in logs_bak_records:
                writer.writerow([record[field] for field in record])

        print(f"Logs_Bak tablosu {backup_file} dosyasına başarıyla dışa aktarıldı.")

    except Exception as e:
        print(f"Hata: {e}")

    # CSV dosyasının adını döndür
    return backup_file_name

# def get_row_count():
#     try:
#         # PostgreSQL veritabanına bağlanma
#         conn = psycopg2.connect(
#             dbname=Postgresql_DB,
#             user=Postgresql_User,
#             password=Postgresql_Password,
#             host=Postgresql_IP,
#             port=5432
#         )

#         # Veritabanı üzerinde bir imleç oluştur
#         cur = conn.cursor()

#         # Tablonun satır sayısını bul
#         get_row_count_query = f"SELECT COUNT(*) FROM {table_name};"
#         cur.execute(get_row_count_query)

#         row_count = cur.fetchone()[0]
#         print(f"{table_name} tablosundaki satır sayısı: {row_count}")

#     except Exception as e:
#         print("Hata:", e)

#     finally:
#         # Bağlantıyı kapat
#         if cur:
#             cur.close()
#         if conn:
#             conn.close()
#     return row_count
def get_row_count():
    try:
        # Logs_Bak modelindeki toplam kayıt sayısını bul
        row_count = Logs_Bak.objects.count()
        print(f"Logs_Bak tablosundaki satır sayısı: {row_count}")

        return row_count

    except Exception as e:
        print(f"Hata: {e}")
        return None

def backup_specific_table_postgresql():

    ### Tabloyu Temizle
    truncate_table()
    ### Son bir saat içerisinde olan logları al
    Bak_up_to_table()
    #### Tablo içerisindeki veri sayısını kontrol et
    row_count = get_row_count()
    if row_count == 0:
        result = False
    else:
        result = export_table_to_csv()
    return result